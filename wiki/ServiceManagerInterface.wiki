#summary module fbclient.service_class, the objectual interface of the Service Manager
#labels Featured
<font size="3">

_Implementation in [http://code.google.com/p/fbclient/source/browse/lua/fbclient/service_class.lua service_class.lua]. Test unit in [http://code.google.com/p/fbclient/source/browse/unit-tests/test_service_class.lua test_service_class.lua]._

<wiki:toc max_depth="2" />

==Introduction==

Firebird allows privileged users to connect to a remote server and perform administrative tasks via its Service Manager interface. This module is the objectual wrapper of that interface.

A terse but complete description of the API + usage notes is in [http://code.google.com/p/fbclient/source/browse/lua/fbclient/service_class.lua service_class.lua]. Complete usage examples are in [http://code.google.com/p/fbclient/source/browse/unit-tests/test_service_class.lua test_service_class.lua].

==Load the module==
{{{
local svc = require 'fbclient.service_class' 
}}}

==Connect to a Service Manager==

===`svc.connect(hostname, username, password, [timeout_sec]) -> svo`===

The timeout value is stored in `svo.timeout` and can be changed between calls on `svo`. A status_vector object is also created and stored in `svo.status_vector`. You can do ErrorHandling with it.
{{{
local svo = svc.connect('localhost', 'SYSDBA', 'masterkey', 10)
}}}

==Close the connection==

===`svo:close()`===

==Get the version of the SM client API==

===`svo:service_manager_version() -> n`===
{{{
assert(svo:service_manager_version() == 2)
}}}

==See if the SM is busy performing a task==

===`svo:busy() -> boolean`===

Although task execution is non-blocking, the server won't perform multiple tasks at the same time, hence this function.
{{{
while not svo:busy() do end
}}}

==Get general information about the server==

===`svo:server_version() -> s`===
===`svo:server_implementation_string() -> s`===
===`svo:server_capabilities() -> caps_t (pair() it out to see)`===
===`svo:server_install_path() -> s`===
===`svo:server_lock_path() -> s`===
===`svo:server_msg_path() -> s`===

==Get the contents of server's log file==

===`svo:server_log()`===
{{{
svo:server_log()
for line_num, line in svo:lines() do
  print(line_num, line)
end
}}}

==Get the names of currently attached databases==

===`svo:attachment_num() -> n`===
===`svo:db_num() -> n`===
===`svo:db_names() -> name_t`===

{{{name_t}}} is an array of database names currently attached. It should hold that {{{#name_t == svo:db_num()}}}.

==Get database statistics==

===`svo:db_stats(database_name, [options_t])`===

|| *options_t field* || *type* || *what it means* || *gstat switch* ||
|| header_page_only || true/false || Request only the information in the database header page || -header ||
|| data_pages || true/false || Request statistics for user data pages || -data ||
|| index_pages || true/false || Request statistics for user index pages || -index ||
|| record_versions || true/false || Include info about record versions || n/a ||
|| include_system_tables || true/false || Request statistics for system tables and indexes too || -system ||

{{{
svo:db_stats('/your/database.fdb', { header_page_only = true })
for line_num, line in svo:lines() do
  print(line_num, line)
end
}}}

==Backup a database==

===`svo:db_backup(database_name, backup_file | backup_file_t, [options_t])`===

The backup file path is relative to the server as the backup will be stored on the server's filesystem.

Normally you'd backup a database to a single file, in which case you'd pass the filename as arg#2. But should the backup file exceed 2G you need to backup the database to multiple files, in which case arg#2 is an array of the form {{{{file1,size1,file2,size2,...,fileN}}}}. fileN will be filled up with the rest of the backup data after file1..fileN-1 are filled.

|| *options_t field* || *type* || *what it means* || *gbak switch ||
|| verbose || true/false || Be verbose. Use svo:lines() or svo:chunks() to get the output. || n/a ||
|| ignore_checksums || true/false || Ignore checksums during backup || -ignore ||
|| ignore_limbo || true/false || Ignore limbo transactions during backup || -limbo ||
|| metadata_only || true/false || Output backup file for metadata only with empty tables || -metadata ||
|| no_garbage_collect || true/false || Suppress normal garbage collection during backup || -garbage_collect ||
|| old_descriptions || true/false || Output metadata in pre-4.0 format || -old_descriptions ||
|| non_transportable || true/false || Output backup file format with non-XDR data format; improves space and performance by a negligible amount || -nt ||
|| include_external_tables || true/false || Convert external table data to internal tables || -convert ||

{{{
local max_file_size = 1024*1024*1024*2-1 -- 2G
local backup_files = {'/your/database.fbk.001', max_file_size, '/your/database.fbk.002'}
local backup_opts = { ignore_checksums = true, include_external_tables = true }
svo:db_backup('/your/database.fdb', backup_files, backup_opts)
}}}

==Restore a database from backup files==

===`svo:db_restore(backup_file | backup_file_list, db_file, [options_t])`===

|| *options_t field* || *type* || *what it means* || *gbak switch* ||
|| verbose || true/false || Be verbose. Use svo:lines() or svo:chunks() to get the output. || n/a ||
|| page_buffers || 0 to 4G || The number of default cache buffers to configure for attachments to the restored database || -buffers ||
|| page_size || 0 to 16K  || The page size for the restored database || -page_size ||
|| read_only || true/false || Restore to read-only state. || -mode ||
|| dont_build_indexes || true/false || Do not build user indexes during restore || -inactive ||
|| dont_recreate_shadow_files || true/false || Do not recreate shadow files during restore || -kill ||
|| dont_validate || true/false || Do not enforce validity conditions (for example, NOT NULL) during restore || -no_validity ||
|| commit_each_table || true/false || Commit after completing restore of each table || -one_at_a_time ||
|| force || true/false || Replace database, if one exists || -replace ||
|| no_space_reservation || true/false || Do not reserve 20% of each data page for future record versions; useful for read-only databases || -use_all_space ||

{{{
local backup_file_list = {'/your/database.fbk.001', '/your/database.fbk.002'}
local restore_opts = { commit_each_table = true, page_size = 1024*16 }
svo:db_restore(backup_file_list, '/your/database.fdb', restore_opts)
}}}

==Check/repair a database==

===`svo:db_repair(database_name, [options_t])`===

|| *options_t field* || *type* || *what it means* || *gfix switch* ||
|| dont_fix || true/false || Request read-only validation of the database, without correcting any problems || -no_update ||
|| ignore_checksums || true/false || Ignore all checksum errors || -ignore ||
|| kill_shadows || true/false || Remove references to unavailable shadow files || -kill ||
|| full || true/false || Check record and page structures, releasing unassigned record fragments || -full ||

==Sweep a database==

===`svo:db_sweep(database_name)`===

Request database sweep to mark outdated records as free space; corresponds to *gfix -sweep*.

==Mend a database==

===`svo:db_mend(database_name)`===

Mark corrupted records as unavailable, so subsequent operations skip them; corresponds
to *gfix -mend*.

==Set database properties==

===`svo:db_set_page_buffers(database_name, page_buffer_num)`===
===`svo:db_set_sweep_interval(database_name, sweep_interval)`===
===`svc:db_set_forced_writes(database_name, true|false)`===
===`svc:db_set_space_reservation(database_name, true|false)`===
===`svc:db_set_read_only(database_name, true|false)`===
===`svc:db_set_dialect(database_name, dialect)`===

==Shutdown a database==

===`svo:db_shutdown(database_name, timeout, [force_mode], [shutdown_mode])`===

|| *force mode* || *meaning* || *gfix switch* || *fbsvcmgr switch* ||
|| full || shutdown the database on timeout, forcibly closing any connections left || -shut -force _timeout_ || prp_force_shutdown _timeout_ ||
|| transactions || shutdown the database on timeout only if there are no active transactions at that point, denying new transactions in the meantime || -shut -tran _timeout_ || prp_transactions_shutdown _timeout_ ||
|| connections || shutdown the database on timeout only if there are no active transactions at that point, denying new connections in the meantime || -shut -attach _timeout_ || prp_attachments_shutdown _timeout_ ||

|| *shutdown_mode* || *meaning* || *fbsvcmgr switch* ||
|| normal || TODO || prp_shutdown_mode prp_sm_normal ||
|| multi (default) || TODO || prp_shutdown_mode prp_sm_multi ||
|| single || TODO || prp_shutdown_mode prp_sm_single ||
|| full || TODO || prp_shutdown_mode prp_sm_full ||

==Activate an offline database or cancel a waiting shutdown==

===`svo:db_activate(database_name, [online_mode])`===

|| *online_mode* || *meaning* || *fbsvcmgr switch* ||
|| normal (default) || TODO || prp_online_mode prp_sm_normal ||
|| multi || TODO || prp_online_mode prp_sm_multi ||
|| single || TODO || prp_online_mode prp_sm_single ||
|| full || TODO || prp_online_mode prp_sm_full ||

==Switch to using the shadow file of a database==

===`svo:db_use_shadow(database_name)`===

==Query/modify the security database==

===`svo:user_db_file() -> s`===
===`svo:user_list([user_db_file]) -> t[username] -> user_t`===
===`svo:user_list(username,[user_db_file]) -> user_t`===
===`svo:user_add(username,password,first_name,middle_name,last_name,[user_db_file])`===
===`svo:user_update(username,password,first_name,middle_name,last_name,[user_db_file])`===
===`svo:user_delete(username,[user_db_file])`===

==Trace API (Firebird 2.5+)==

===`svo:trace_start(trace_config_string, [trace_name])`===
===`svo:trace_list() -> trace_list_t`===
===`svo:trace_suspend(trace_id)`===
===`svo:trace_resume(trace_id)`===
===`svo:trace_stop(trace_id)`===

Read [http://www.firebirdsql.org/rlsnotesh/rlsnotes25.html#rnfb25-trace the Firebird 2.5 Relnotes on the tracing API] until I document these functions.

==RDB$ADMIN role mapping (Firebird 2.5+)==

===`svo:rdbadmin_set_mapping()`===
===`svo:rdbadmin_drop_maping()`===

Enable/disable the RDB$ADMIN role for the appointed OS user for a service request to access security2.fdb.

==Get the output of a performing task==

The functions `db_backup()` and `db_restore()` with verbose option on, as well as `db_stats()`, `server_log()` and `trace_start()`, do not return any output directly- instead you must use the iterators returned by `lines()` or `chunks()` to get their output either line by line or chunk by chunk. Calling `lines()` or `chunks()` on an empty buffer is blocking the thread until more data is available.

Use either:
{{{
for line_num, line in svo:lines() do
  print(line)
end
}}}
or the faster alternative
{{{
for _, chunk in svo:chunks() do
  io.write(chunk)
end
}}}

==Going procedural==

As with the `firebird.class` module, this module is also based on a [http://code.google.com/p/fbclient/source/browse/lua/fbclient/service_wrapper.lua procedural wrapper] that is only locally documented, but the code is thin and easy to follow and there's also a [http://code.google.com/p/fbclient/source/browse/unit-tests/test_service_wrapper.lua test unit file] for it.